{
  "Olumjs Instance": {
    "prefix": "olum",
    "body": ["import Olum from \"olum\";\nimport ${Component} from \"/path/to/${Component}\";\n\nnew Olum().$(\"#app\").use(${Component});"],
    "description": "Instance"
  },
  "Olumjs Component": {
    "prefix": "olumc",
    "body": [
      "<template>\n<div class=\"${Component}\"></div>\n</template>\n\n<script>\nexport default class ${Component} {\n  render() {}\n}\n</script>\n\n<style lang=\"scss\">\n.${Component} {\n}\n</style>"
    ],
    "description": "Component"
  },
  "Olumjs Service": {
    "prefix": "olums",
    "body": [
      "import { Service } from \"olum-helpers\";\n\nclass API extends Service {\n  constructor() {\n    super(\"${eventName}\");\n  }\n}\n\nconst api = new API();\nexport default api;"
    ],
    "description": "Service"
  },
  "Olumjs Router": {
    "prefix": "olumr",
    "body": [
      "import OlumRouter from \"olum-router\";\n\nimport ${Component} from \"/path/to/${Component}\";\n\nconst routes = [{ path: \"/\", comp: ${Component} }];\n\nconst router = new OlumRouter({ mode: \"history\", root: \"/\", routes });\nexport default router;"
    ],
    "description": "Router"
  },
  "If Statement (Olumjs)": {
    "prefix": ["if"],
    "body": ["<if cond=\"${1:condition}\">$0</if>"],
    "description": ["Olum Abbreviation", "\nIf statement"]
  },
  "Else If Statement (Olumjs)": {
    "prefix": ["elif", "elseif", "else-if"],
    "body": ["<else-if cond=\"${1:condition}\">$0</else-if>"],
    "description": ["Olum Abbreviation", "\nElse if statement"]
  },
  "Else Statement (Olumjs)": {
    "prefix": ["else", "el"],
    "body": ["<else>$0</else>"],
    "description":["Olum Abbreviation", "\nElse statement"]
  },
  "For in Loop (Olumjs)": {
    "prefix": ["for", "forin"],
    "body": ["<for cond=\"${2|key,(key\\, index),(key\\, index\\, value)|} in ${1:myObject}\">$0</for>"],
    "description": ["Olum Abbreviation", "\nA for loop for objects"]
  },
  "For of Loop (Olumjs)": {
    "prefix": ["for", "forof"],
    "body": ["<for cond=\"${2|item,(item\\, index),(item\\, index\\, array)|} of ${1:myArray}\">$0</for>"],
    "description": ["Olum Abbreviation", "\nA for loop for arrays"]
  },
  "Show Statement (Olumjs)": {
    "prefix": ["show", "sho"],
    "body": ["<show cond=\"${1:condition}\">$0</show>"],
    "description": ["Olum Abbreviation", "\nA statement for showing","and hiding elements"]
  },
  "Self-closing tag":{
    "prefix": ["comp", "com"],
    "body": ["<${1}/>$0"],
    "description": ["Olum Abbreviation", "\nSelf-closing tag"]
  },
  "Normal tag":{
    "prefix": ["comp", "com"],
    "body": ["<${1}>$0</${1}>"],
    "description": ["Olum Abbreviation", "\nNormal tag"]
  }
}
